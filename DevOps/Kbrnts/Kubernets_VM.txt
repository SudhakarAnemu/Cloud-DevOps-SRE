JS 

/cygdrive/c/users/sudha/Desktop/jssudha/jsGit/Cloud-DevOps-SRE/DevOps/Kbrnts/Udemy/Vinoth

docker run ubuntu date --> command. 
its args in kubernts. 

Docker (Entrypoint and CMD) 
Kubernets (command and args) 



changeme
watch -t -x kubectl get pods -A -o wide 
kubectl create -f <yml file>.yml 
kubectl delete -f <yml file>
kubectl apply -f <yml file> 
kubectl describe pod js1002440
kubectl get pods --show-labels
kubectl get pods -l dept=dept-1

kubectl get pods -l team!=team-1 -o wide
kubectl get pods -l dept=dept-2,team=team-1

Get pod details in yml format : 

 kubectl get pod pod-1 -o yaml

--> port forward : 
$ kubectl port-forward nginxpod1 1234:80
Forwarding from 127.0.0.1:1234 -> 80
Forwarding from [::1]:1234 -> 80
Handling connection for 1234
Handling connection for 1234

http://localhost:1234



logs
kubectl logs -f calico-node-lhdt5 --tail=50 -n calico-system






kind create cluster --config kind-example-config.yaml

kind create cluster --config kind-example-config.yaml

/c/Users/sudha/kind create cluster --config  master.yml



List out all Kubernets images : 

kubectl get pods --all-namespaces -o jsonpath='{..image}' | \
tr -s '[[:space:]]' '\n' | \
sort | \
uniq -c





Tasks : Install Lense for monitoirng K8s. 



Master IP : 
192.168.3.20 (Master)  
192.168.3.21 (Worker1) 
192.168.3.22 (Worker1) 

ubuntu / changeme
Imp port : 6443


------------>> Ports open : 

# Open Kubernetes Control Plane Ports
sudo firewall-cmd --permanent --add-port=6443/tcp
sudo firewall-cmd --permanent --add-port=2379-2380/tcp
sudo firewall-cmd --permanent --add-port=10250/tcp
sudo firewall-cmd --permanent --add-port=10257/tcp
sudo firewall-cmd --permanent --add-port=10259/tcp
sudo firewall-cmd --reload

# Open Kubernetes Worker Ports
sudo firewall-cmd --permanent --add-port=10250/tcp
sudo firewall-cmd --permanent --add-port=30000-32767/tcp
sudo firewall-cmd --permanent --add-port=30000-32767/udp
sudo firewall-cmd --reload




------------------------------------------------------------------------->>> Master nodes 


ufw allow 8080/tcp
ufw allow 6443/tcp
ufw allow 2379/tcp
ufw allow 2380/tcp
ufw allow 10250/tcp
ufw allow 10257/tcp
ufw allow 10259/tcp
ufw status numbered
sudo ufw disable
sleep 10



export KUBECONFIG=/etc/kubernetes/admin.conf
sudo swapoff -a
systemctl start containerd
systemctl start kubelet
sudo ufw disable






sleep 10 
systemctl status kubelet
systemctl status containerd
echo "------------------"
echo $KUBECONFIG



root@master01:~# sudo ufw status
Status: inactive
root@master01:~# sudo ufw disable
Firewall stopped and disabled on system startup



systemctl status containerd
systemctl status kubelet

systemctl restart containerd
systemctl restart kubelet
------------------------------------------------------------------------->>> Worker nodes 

sudo swapoff -a
systemctl start containerd
systemctl start kubelet
sleep 10 
systemctl status kubelet
echo -e "\n-------------------------------------------"
systemctl status containerd

# Run this on worker01 to test connection to the master's API server
curl -k https://192.168.3.20:6443



systemctl restart containerd
systemctl restart kubelet

----------------------------------------------------------> Frequent commands : 

kubectl get nodes
kubectl get pods -A 
kubectl get pods -o wide 
watch kubectl get pods -n calico-system
watch kubectl get nodes -o wide

kubectl get events 
kubectl top nodes 

kubectl create ns jsns

kubectl apply -f yml -n jsns 
kubectl get pods -n jsns 

kubectl get pods -n jsns -o wide

http://192.168.3.20:30000

Delete all pods from a Namespace : 
kubectl delete pods --all --namespace=jsns
kubectl delete pods --all -n jsns --grace-period=0 --force

Delete the namespace : 
kubectl delete namespace jsns

kubectl config view --minify --raw
above command will show the configuraton of the Kubernets. 
That neeeds to be configure at Lens inorder to connect Kubernets. 


Troubleshooting : 

curl -k https://192.168.3.20:6443 


---------------------------->>. Installatios of metrics server : 

kubectl apply -f [https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml](https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml)

kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
 
 

1. VirtualBox : 7.0 (It has NW options). 

Disable hyper-v on windows. 
Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Hypervisor
-> Above command was not working so that the I issued below command : 
PS C:\Windows\system32> bcdedit /set hypervisorlaunchtype off
The operation completed successfully.
PS C:\Windows\system32>

--> working on NW mgr : 
file -> tools -> NW Mgr
Host-only NW -> Create -> 
DHCP -> should be in disable 
Adapter -> IPv4 -> give : 192.168.3.1

---> Creating a new node (Master) : 
4GB RAM and 2 VCPUs. 
First power off to change NW 
VM -> NW -> Adapter2 -> 
Enable NW Adapter -> Attached to "Host-only Adapter" -> VMBox Either Adapter #2 --> 

Change VM setting while it is rebooting. 

enp0s3 -> DHCPv4 : 10.0.2.15/24 : 
Select second option -> 
Edit IPv4 -> IPv4 Method -> Manual -> 

Subnet : 192.168.3.0/24 
Address : 192.168.3.20 (master) --192.168.3.21 (worker01)
192.168.3.24 (master01) 

--> Install OpenSSH server (Select enter) 


Login with Root : 

apt install net-tools
apt install telnet
apt update
apt upgrade -y


export KUBECONFIG=/etc/kubernetes/admin.conf
export KUBECONFIG=/etc/kubernetes/kubelet.conf
systemctl status kubelet



Initialize control panel : 
--> Ex : 
sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=172.31.89.68 --node-name master
sudo kubeadm init --apiserver-advertise-address=192.168.0.10 --pod-network-cidr=192.168.0.0/16


Actual commands : 
sudo kubeadm init --apiserver-advertise-address=192.168.3.20 --pod-network-cidr=192.168.3.0/16
	
----------------------------------------------->> Output : 

 
Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 192.168.3.20:6443 --token sg4gmr.9win75ehcx4dx32z \
        --discovery-token-ca-cert-hash sha256:ba8895b57dbbe63e5a6d07d7827974e47c382f5ed6f8d128863d88b1cf8d00dc
root@master:/tmp#



--------------------------------------------------------->>>>>>>>>>>

--------------------->> Output at the worker node : 

root@worker01:/tmp#
kubeadm join 192.168.3.20:6443 --token iyt3hb.fvrtgrc71dxi2m11 \
        --discovery-token-ca-cert-hash sha256:38adea1ab9391bad0d503b431f0e6f2845ea1446625fa9e4ffdd9aecd74963eb

[preflight] Running pre-flight checks
[preflight] Reading configuration from the cluster...
[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -o yaml'
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Starting the kubelet
[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...
[kubelet-check] Initial timeout of 40s passed.

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run 'kubectl get nodes' on the control-plane to see this node join the cluster.

root@worker01:/tmp#

----------------------------------------------------------------------------------------------------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>















All images are at  
C:\Users\sudha\VirtualBox VMs\controlnode\Snapshots










Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All

root@controlnode:~# history
    1  exit
    2  apt update && apt upgrade -y
    3  ping 192.168.3.21
    4  ip -a
    5  ip a
    6  systemctl status ssh
    7  exit
    8  history

	
	apt update
	apt upgrade -y 
	
	 systemctl status containerd

	 
	 sudo systemctl restart containerd
	 
	 Follow from time  28 mintues 
	 
	Run below command at control plane : 
	
	 -
[sudo] password for ubuntu:
root@controlnode:~# cd /tmp/
root@controlnode:/tmp# sudo kubeadm config images pull
I0925 16:48:41.046352    7048 version.go:256] remote version is much newer: v1.34.1; falling back to: stable-1.30

[config/images] Pulled registry.k8s.io/kube-apiserver:v1.30.14
[config/images] Pulled registry.k8s.io/kube-controller-manager:v1.30.14
[config/images] Pulled registry.k8s.io/kube-scheduler:v1.30.14
[config/images] Pulled registry.k8s.io/kube-proxy:v1.30.14
[config/images] Pulled registry.k8s.io/coredns/coredns:v1.11.3
[config/images] Pulled registry.k8s.io/pause:3.9
[config/images] Pulled registry.k8s.io/etcd:3.5.15-0
root@controlnode:/tmp# sudo kubeadm init --apiserver-advertise-address=192.168.3.20 --pod-network-cidr=192.168.0.0/16
I0925 16:54:38.875172    8868 version.go:256] remote version is much newer: v1.34.1; falling back to: stable-1.30
[init] Using Kubernetes version: v1.30.14
[preflight] Running pre-flight checks
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[certs] Using certificateDir folder "/etc/kubernetes/pki"
[certs] Generating "ca" certificate and key
[certs] Generating "apiserver" certificate and key
[certs] apiserver serving cert is signed for DNS names [controlnode kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.3.20]
[certs] Generating "apiserver-kubelet-client" certificate and key
[certs] Generating "front-proxy-ca" certificate and key
[certs] Generating "front-proxy-client" certificate and key
[certs] Generating "etcd/ca" certificate and key
[certs] Generating "etcd/server" certificate and key
[certs] etcd/server serving cert is signed for DNS names [controlnode localhost] and IPs [192.168.3.20 127.0.0.1 ::1]
[certs] Generating "etcd/peer" certificate and key
[certs] etcd/peer serving cert is signed for DNS names [controlnode localhost] and IPs [192.168.3.20 127.0.0.1 ::1]
[certs] Generating "etcd/healthcheck-client" certificate and key
[certs] Generating "apiserver-etcd-client" certificate and key
[certs] Generating "sa" key and public key
[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
[kubeconfig] Writing "admin.conf" kubeconfig file
[kubeconfig] Writing "super-admin.conf" kubeconfig file
[kubeconfig] Writing "kubelet.conf" kubeconfig file
[kubeconfig] Writing "controller-manager.conf" kubeconfig file
[kubeconfig] Writing "scheduler.conf" kubeconfig file
[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
[control-plane] Using manifest folder "/etc/kubernetes/manifests"
[control-plane] Creating static Pod manifest for "kube-apiserver"
[control-plane] Creating static Pod manifest for "kube-controller-manager"
[control-plane] Creating static Pod manifest for "kube-scheduler"
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests"
[kubelet-check] Waiting for a healthy kubelet at http://127.0.0.1:10248/healthz. This can take up to 4m0s
[kubelet-check] The kubelet is healthy after 6.512485214s
[api-check] Waiting for a healthy API server. This can take up to 4m0s
[api-check] The API server is healthy after 2m12.864422818s
[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
[kubelet] Creating a ConfigMap "kubelet-config" in namespace kube-system with the configuration for the kubelets in the cluster
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node controlnode as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
[mark-control-plane] Marking the node controlnode as control-plane by adding the taints [node-role.kubernetes.io/control-plane:NoSchedule]
[bootstrap-token] Using token: dr9b7p.a71gikz888aqv5ku
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes
[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 192.168.3.20:6443 --token dr9b7p.a71gikz888aqv5ku \
        --discovery-token-ca-cert-hash sha256:8791ca9d6ba97e2d2c27a1dbbad0bea39ccb458a49e3321a3fe1c8b3e37a5664
root@controlnode:/tmp#

-----------> I am running with root : 

 export KUBECONFIG=/etc/kubernetes/admin.conf
 
 
 export KUBECONFIG=/etc/kubernetes/kubelet.conf
 
 
 systemctl status kubelet
 
 
 watch kubectl get pods -n calico-system
 
 ---->>
 
 
root@controlnode:/tmp# kubeadm token create --print-join-command
kubeadm join 192.168.3.20:6443 --token p58vg0.ouf3h8fj949tq3hg --discovery-token-ca-cert-hash sha256:8791ca9d6ba97e2d2c27a1dbbad0bea39ccb458a49e3321a3fe1c8b3e37a5664
root@controlnode:/tmp#


---------------------------------------->> Bootable script on Master node : 
---> run with root id : 

vi /usr/local/bin/my-startup-script.sh

#!/bin/bash
# Log a message and run a command
echo "$(date) - Running startup script" >> /var/log/my-startup.log
ufw allow 6443/tcp
ufw allow 8080/tcp
ufw status numbered
export KUBECONFIG=/etc/kubernetes/admin.conf
sudo swapoff -a
systemctl start containerd
systemctl start kubelet

chmod 777 /usr/local/bin/my-startup-script.sh

Create a Service : 
vi /etc/systemd/system/my-startup.service

---> Script : 

[Unit]
Description=My Custom Startup Command
# Wait until the network is up before running
After=network.target

[Service]
Type=oneshot
# Use 'simple' if your script is a long-running background process (daemon)
# Use 'oneshot' if your script runs and exits quickly
ExecStart=/usr/local/bin/my-startup-script.sh
# Set the user to run the script as (optional, defaults to root)
User=root 
RemainAfterExit=yes 
# If Type=oneshot, RemainAfterExit=yes keeps the service active until reboot

[Install]
WantedBy=multi-user.target
# multi-user.target is the standard runlevel for a non-graphical server boot


--->> restart : 
systemctl daemon-reload

systemctl enable my-startup.service

systemctl start my-startup.service

systemctl status my-startup.service

----------------------------------------------------->> Bootable Script at Worker nodes : 

#!/bin/bash
# Log a message and run a command
echo "$(date) - Running startup script" >> /var/log/my-startup.log
sudo swapoff -a
systemctl start containerd
systemctl start kubelet



-----------------------------------------------------------> Issue : 
calico-apiserver   calico-apiserver-789c7c989b-gk8vn         0/1     Unknown            2                4d18h

kubectl describe pod calico-apiserver-789c7c989b-gk8vn -n calico-apiserver

kubectl logs calico-apiserver-789c7c989b-gk8vn -n calico-apiserver






--------------------->> At master02 server :  192.168.3.24

sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=172.31.89.68 --node-name master
Actual commands : going to run below command 
sudo kubeadm init --apiserver-advertise-address=192.168.3.24 --pod-network-cidr=192.168.3.0/16



Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 192.168.3.24:6443 --token 1x9yjz.s59098feinpptjcv \
        --discovery-token-ca-cert-hash sha256:f45696e5351571848ce1372fbb298f7bae4f63a4db0c0cb9b81d4f780e38da66
root@master01:~#






